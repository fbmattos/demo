/**
 * DockerCon 2017 API
 * This is an exclusive API example for DockerCon 2017 participants.  Tips:   - To fork and work on your own version of this API, select 'Fork API' from the '...' menu   - To share and collaborate on your API, email us clicking below with subject line *\"Special trial for DockerCon participants\"*  Click below to email us: mailto:support@swaggerhub.com 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@swaggerhub.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AgendaItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AgendaItem'));
  } else {
    // Browser globals (root is window)
    if (!root.DockerCon2017Api) {
      root.DockerCon2017Api = {};
    }
    root.DockerCon2017Api.AgendaApi = factory(root.DockerCon2017Api.ApiClient, root.DockerCon2017Api.AgendaItem);
  }
}(this, function(ApiClient, AgendaItem) {
  'use strict';

  /**
   * Agenda service.
   * @module api/AgendaApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AgendaApi. 
   * @alias module:api/AgendaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the agendaGet operation.
     * @callback module:api/AgendaApi~agendaGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AgendaItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches list of events
     * By passing in the appropriate options, you can search for available events in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up events
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/AgendaApi~agendaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AgendaItem>}
     */
    this.agendaGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AgendaItem];

      return this.apiClient.callApi(
        '/agenda', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the agendaPost operation.
     * @callback module:api/AgendaApi~agendaPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an event
     * Adds an event to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/AgendaItem} opts.eventItem Event to add
     * @param {module:api/AgendaApi~agendaPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.agendaPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['eventItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/agenda', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
